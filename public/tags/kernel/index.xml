<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on 4rdr0ci</title>
    <link>https://ardroci.pages.dev/tags/kernel/</link>
    <description>Recent content in Kernel on 4rdr0ci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 May 2023 19:47:08 +0100</lastBuildDate><atom:link href="https://ardroci.pages.dev/tags/kernel/index.xml" rel="self" type="application/rss+xml" /><item>
      <title>Linux kernel stack trace</title>
      <link>https://ardroci.pages.dev/posts/detections/linux/linux-kernel-stack/</link>
      <pubDate>Sun, 28 May 2023 19:47:08 +0100</pubDate>
      
      <guid>https://ardroci.pages.dev/posts/detections/linux/linux-kernel-stack/</guid>
      <description>What is a kernel stack call? The Linux kernel stack call, also known as the kernel stack trace, provides information about the sequence of function calls and their associated memory addresses that are currently executing in the kernel. It helps in understanding the execution flow and context within the kernel when certain events occur. Here is the information typically included in a Linux kernel stack call:
Memory Addresses: The kernel stack call includes memory addresses, usually in hexadecimal format, representing the locations in memory where each function call resides.</description>
    </item>
    
    
  </channel>
</rss>
